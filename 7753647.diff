From 7753647951f49ea456dcd52d69891411b380b1b2 Mon Sep 17 00:00:00 2001
From: Fan Jiang <fan.torchz@gmail.com>
Date: Wed, 10 Aug 2016 15:52:05 -0500
Subject: [PATCH] x/crypto/openpgp: add Encryption/Serialization of Encrypted PrivateKey

Add support for encryption & serialization of PrivateKeys

Related issue: golang/go#16664

Change-Id: Idf41057795ba7c0bf4a6fb37662bb048680c5b2d
---

diff --git a/openpgp/keys.go b/openpgp/keys.go
index fd9bbd2..f97e930 100644
--- a/openpgp/keys.go
+++ b/openpgp/keys.go
@@ -531,35 +531,20 @@
 	return e, nil
 }
 
-// SerializePrivate serializes an Entity, including private key material, to
-// the given Writer. For now, it must only be used on an Entity returned from
-// NewEntity.
+// SerializePrivateWithoutSign serializes an Entity, including private key material, to
+// the given Writer. For now, it should be called after SelfSign or a Deserialized Entity.
 // If config is nil, sensible defaults will be used.
-func (e *Entity) SerializePrivate(w io.Writer, config *packet.Config) (err error) {
+func (e *Entity) SerializePrivateWithoutSign(w io.Writer) (err error) {
 	err = e.PrivateKey.Serialize(w)
 	if err != nil {
 		return
 	}
-	for _, ident := range e.Identities {
-		err = ident.UserId.Serialize(w)
-		if err != nil {
-			return
-		}
-		err = ident.SelfSignature.SignUserId(ident.UserId.Id, e.PrimaryKey, e.PrivateKey, config)
-		if err != nil {
-			return
-		}
-		err = ident.SelfSignature.Serialize(w)
-		if err != nil {
-			return
-		}
+	err = e.serializeIdentities(w)
+	if err != nil {
+		return err
 	}
 	for _, subkey := range e.Subkeys {
 		err = subkey.PrivateKey.Serialize(w)
-		if err != nil {
-			return
-		}
-		err = subkey.Sig.SignKey(subkey.PublicKey, e.PrivateKey, config)
 		if err != nil {
 			return
 		}
@@ -571,6 +556,39 @@
 	return nil
 }
 
+// SelfSign sign an Entity, on both Identities and Subkeys
+func (e *Entity) SelfSign(config *packet.Config) (err error) {
+	for _, ident := range e.Identities {
+		err = ident.SelfSignature.SignUserId(ident.UserId.Id, e.PrimaryKey, e.PrivateKey, config)
+		if err != nil {
+			return
+		}
+	}
+	for _, subkey := range e.Subkeys {
+		err = subkey.Sig.SignKey(subkey.PublicKey, e.PrivateKey, config)
+		if err != nil {
+			return
+		}
+	}
+	return nil
+}
+
+// SerializePrivate serializes an Entity, including private key material, to
+// the given Writer. For now, it must only be used on an Entity returned from
+// NewEntity.
+// If config is nil, sensible defaults will be used.
+func (e *Entity) SerializePrivate(w io.Writer, config *packet.Config) (err error) {
+	err = e.SelfSign(config)
+	if err != nil {
+		return
+	}
+	err = e.SerializePrivateWithoutSign(w)
+	if err != nil {
+		return
+	}
+	return nil
+}
+
 // Serialize writes the public part of the given Entity to w. (No private
 // key material will be output).
 func (e *Entity) Serialize(w io.Writer) error {
@@ -578,6 +596,24 @@
 	if err != nil {
 		return err
 	}
+	err = e.serializeIdentities(w)
+	if err != nil {
+		return err
+	}
+	for _, subkey := range e.Subkeys {
+		err = subkey.PublicKey.Serialize(w)
+		if err != nil {
+			return err
+		}
+		err = subkey.Sig.Serialize(w)
+		if err != nil {
+			return err
+		}
+	}
+	return nil
+}
+
+func (e *Entity) serializeIdentities(w io.Writer) (err error) {
 	for _, ident := range e.Identities {
 		err = ident.UserId.Serialize(w)
 		if err != nil {
@@ -594,17 +630,7 @@
 			}
 		}
 	}
-	for _, subkey := range e.Subkeys {
-		err = subkey.PublicKey.Serialize(w)
-		if err != nil {
-			return err
-		}
-		err = subkey.Sig.Serialize(w)
-		if err != nil {
-			return err
-		}
-	}
-	return nil
+	return
 }
 
 // SignIdentity adds a signature to e, from signer, attesting that identity is
diff --git a/openpgp/packet/private_key.go b/openpgp/packet/private_key.go
index 545846b..c5d0852 100644
--- a/openpgp/packet/private_key.go
+++ b/openpgp/packet/private_key.go
@@ -6,11 +6,15 @@
 
 import (
 	"bytes"
 	"crypto/cipher"
+	"crypto"
 	"crypto/dsa"
 	"crypto/ecdsa"
+	"crypto/rand"
 	"crypto/rsa"
 	"crypto/sha1"
+	"encoding/binary"
+	"fmt"
 	"io"
 	"io/ioutil"
 	"math/big"
@@ -33,7 +37,20 @@
 	PrivateKey    interface{} // An *rsa.PrivateKey or *dsa.PrivateKey.
 	sha1Checksum  bool
 	iv            []byte
+
+	// s2k related
+	salt      []byte
+	s2kConfig s2k.Config
+	s2kType   s2kType
 }
+
+type s2kType uint8
+
+const (
+	s2knon      s2kType = 0
+	s2ksha1     s2kType = 254
+	s2kchecksum s2kType = 255
+)
 
 func NewRSAPrivateKey(currentTime time.Time, priv *rsa.PrivateKey) *PrivateKey {
 	pk := new(PrivateKey)
@@ -74,24 +91,24 @@
 		return
 	}
 
-	s2kType := buf[0]
+	pk.s2kType = s2kType(buf[0])
 
-	switch s2kType {
-	case 0:
+	switch pk.s2kType {
+	case s2knon:
 		pk.s2k = nil
 		pk.Encrypted = false
-	case 254, 255:
+	case s2ksha1, s2kchecksum:
 		_, err = readFull(r, buf[:])
 		if err != nil {
 			return
 		}
 		pk.cipher = CipherFunction(buf[0])
 		pk.Encrypted = true
-		pk.s2k, err = s2k.Parse(r)
+		pk.s2k, pk.salt, pk.s2kConfig, err = s2k.ParseS2KWithConfig(r)
 		if err != nil {
 			return
 		}
-		if s2kType == 254 {
+		if pk.s2kType == s2ksha1 {
 			pk.sha1Checksum = true
 		}
 	default:
@@ -130,31 +147,76 @@
 	return h
 }
 
+func (pk *PrivateKey) SerializeEncrypted(w io.Writer) error {
+	privateKeyBuf := bytes.NewBuffer(nil)
+	encodedKeyBuf := bytes.NewBuffer(nil)
+	encodedKeyBuf.Write([]byte{uint8(pk.s2kType)})
+	encodedKeyBuf.Write([]byte{uint8(pk.cipher)})
+	encodedKeyBuf.Write([]byte{pk.s2kConfig.S2KMode})
+	hashID, ok := s2k.HashToHashId(pk.s2kConfig.Hash)
+	if !ok {
+		return errors.UnsupportedError("no such hash")
+	}
+	encodedKeyBuf.Write([]byte{hashID})
+	encodedKeyBuf.Write(pk.salt)
+	encodedKeyBuf.Write([]byte{pk.s2kConfig.EncodedCount()})
+
+	privateKeyBuf.Write(pk.encryptedData)
+
+	encodedKey := encodedKeyBuf.Bytes()
+	privateKeyBytes := privateKeyBuf.Bytes()
+
+	w.Write(encodedKey)
+	w.Write(pk.iv)
+	w.Write(privateKeyBytes)
+
+	return nil
+}
+
+func (pk *PrivateKey) SerializeUnEncrypted(w io.Writer) (err error) {
+	buf := bytes.NewBuffer(nil)
+	buf.Write([]byte{uint8(s2knon)} /* no encryption */)
+	switch priv := pk.PrivateKey.(type) {
+	case *rsa.PrivateKey:
+		err = serializeRSAPrivateKey(buf, priv)
+	case *dsa.PrivateKey:
+		err = serializeDSAPrivateKey(buf, priv)
+	case *elgamal.PrivateKey:
+		err = serializeElGamalPrivateKey(buf, priv)
+	case *ecdsa.PrivateKey:
+		err = serializeECDSAPrivateKey(buf, priv)
+	default:
+		err = errors.InvalidArgumentError("unknown private key type")
+	}
+	privateKeyBytes := buf.Bytes()
+	if pk.sha1Checksum {
+		h := sha1.New()
+		h.Write(privateKeyBytes)
+		sum := h.Sum(nil)
+		privateKeyBytes = append(privateKeyBytes, sum...)
+	} else {
+		checksum := mod64kHash(privateKeyBytes)
+		var checksumBytes [2]byte
+		checksumBytes[0] = byte(checksum >> 8)
+		checksumBytes[1] = byte(checksum)
+		privateKeyBytes = append(privateKeyBytes, checksumBytes[:]...)
+	}
+	w.Write(privateKeyBytes)
+	return
+}
+
 func (pk *PrivateKey) Serialize(w io.Writer) (err error) {
-	// TODO(agl): support encrypted private keys
 	buf := bytes.NewBuffer(nil)
 	err = pk.PublicKey.serializeWithoutHeaders(buf)
 	if err != nil {
 		return
 	}
-	buf.WriteByte(0 /* no encryption */)
 
 	privateKeyBuf := bytes.NewBuffer(nil)
-
-	switch priv := pk.PrivateKey.(type) {
-	case *rsa.PrivateKey:
-		err = serializeRSAPrivateKey(privateKeyBuf, priv)
-	case *dsa.PrivateKey:
-		err = serializeDSAPrivateKey(privateKeyBuf, priv)
-	case *elgamal.PrivateKey:
-		err = serializeElGamalPrivateKey(privateKeyBuf, priv)
-	case *ecdsa.PrivateKey:
-		err = serializeECDSAPrivateKey(privateKeyBuf, priv)
-	default:
-		err = errors.InvalidArgumentError("unknown private key type")
-	}
-	if err != nil {
-		return
+	if pk.Encrypted {
+		pk.SerializeEncrypted(privateKeyBuf)
+	} else {
+		pk.SerializeUnEncrypted(privateKeyBuf)
 	}
 
 	ptype := packetTypePrivateKey
@@ -163,7 +225,7 @@
 	if pk.IsSubkey {
 		ptype = packetTypePrivateSubkey
 	}
-	err = serializeHeader(w, ptype, len(contents)+len(privateKeyBytes)+2)
+	err = serializeHeader(w, ptype, len(contents)+len(privateKeyBytes))
 	if err != nil {
 		return
 	}
@@ -175,13 +237,6 @@
 	if err != nil {
 		return
 	}
-
-	checksum := mod64kHash(privateKeyBytes)
-	var checksumBytes [2]byte
-	checksumBytes[0] = byte(checksum >> 8)
-	checksumBytes[1] = byte(checksum)
-	_, err = w.Write(checksumBytes[:])
-
 	return
 }
 
@@ -213,6 +268,112 @@
 	return writeBig(w, priv.D)
 }
 
+func (pk *PrivateKey) Encrypt(passphrase []byte) error {
+	privateKeyBuf := bytes.NewBuffer(nil)
+	err := pk.SerializePrivateMPI(privateKeyBuf)
+	if err != nil {
+		return err
+	}
+
+	//Default config of private key encryption
+	pk.cipher = CipherAES128
+	pk.s2kConfig = s2k.Config{
+		S2KMode:  3, //Iterated
+		S2KCount: 65536,
+		Hash:     crypto.SHA1,
+	}
+
+	privateKeyBytes := privateKeyBuf.Bytes()
+	key := make([]byte, pk.cipher.KeySize())
+	pk.salt = make([]byte, 8)
+	rand.Read(pk.salt)
+
+	pk.s2k = func(out, in []byte) {
+		s2k.Iterated(out, pk.s2kConfig.Hash.New(), in, pk.salt, pk.s2kConfig.S2KCount)
+	}
+	pk.s2k(key, passphrase)
+	block := pk.cipher.new(key)
+	pk.iv = make([]byte, pk.cipher.blockSize())
+	rand.Read(pk.iv)
+	cfb := cipher.NewCFBEncrypter(block, pk.iv)
+
+	if pk.sha1Checksum {
+		pk.s2kType = s2ksha1
+		h := sha1.New()
+		h.Write(privateKeyBytes)
+		sum := h.Sum(nil)
+		privateKeyBytes = append(privateKeyBytes, sum...)
+	} else {
+		pk.s2kType = s2kchecksum
+		var sum uint16
+		for i := 0; i < len(privateKeyBytes); i++ {
+			sum += uint16(privateKeyBytes[i])
+		}
+		privateKeyBytes = append(privateKeyBytes, uint8(sum>>8))
+		privateKeyBytes = append(privateKeyBytes, uint8(sum))
+	}
+
+	pk.encryptedData = make([]byte, len(privateKeyBytes))
+
+	cfb.XORKeyStream(pk.encryptedData, privateKeyBytes)
+
+	pk.Encrypted = true
+	return err
+}
+
+func (pk *PrivateKey) SerializePrivateMPI(privateKeyBuf io.Writer) error {
+	var err error
+	switch priv := pk.PrivateKey.(type) {
+	case *rsa.PrivateKey:
+		err = serializeRSAPrivateKeyMPI(privateKeyBuf, priv)
+	case *dsa.PrivateKey:
+		err = serializeDSAPrivateKeyMPI(privateKeyBuf, priv)
+	case *elgamal.PrivateKey:
+		err = serializeElGamalPrivateKeyMPI(privateKeyBuf, priv)
+	case *ecdsa.PrivateKey:
+		err = serializeECDSAPrivateKeyMPI(privateKeyBuf, priv)
+	default:
+		err = errors.InvalidArgumentError("unknown private key type")
+	}
+	return err
+}
+
+func serializeRSAPrivateKeyMPI(w io.Writer, priv *rsa.PrivateKey) error {
+	binary.Write(w, binary.BigEndian, priv.D.BitLen())
+	err := writeBig(w, priv.D)
+	if err != nil {
+		return err
+	}
+	binary.Write(w, binary.BigEndian, priv.Primes[0].BitLen())
+	err = writeBig(w, priv.Primes[0])
+	if err != nil {
+		return err
+	}
+	binary.Write(w, binary.BigEndian, priv.Primes[1].BitLen())
+	err = writeBig(w, priv.Primes[1])
+	if err != nil {
+		return err
+	}
+	u := new(big.Int).ModInverse(priv.Primes[0], priv.Primes[1])
+	binary.Write(w, binary.BigEndian, u.BitLen())
+	return writeBig(w, u)
+}
+
+func serializeDSAPrivateKeyMPI(w io.Writer, priv *dsa.PrivateKey) error {
+	binary.Write(w, binary.BigEndian, priv.X.BitLen())
+	return writeBig(w, priv.X)
+}
+
+func serializeElGamalPrivateKeyMPI(w io.Writer, priv *elgamal.PrivateKey) error {
+	binary.Write(w, binary.BigEndian, priv.X.BitLen())
+	return writeBig(w, priv.X)
+}
+
+func serializeECDSAPrivateKeyMPI(w io.Writer, priv *ecdsa.PrivateKey) error {
+	binary.Write(w, binary.BigEndian, priv.D.BitLen())
+	return writeBig(w, priv.D)
+}
+
 // Decrypt decrypts an encrypted private key using a passphrase.
 func (pk *PrivateKey) Decrypt(passphrase []byte) error {
 	if !pk.Encrypted {
@@ -223,7 +384,6 @@
 	pk.s2k(key, passphrase)
 	block := pk.cipher.new(key)
 	cfb := cipher.NewCFBDecrypter(block, pk.iv)
-
 	data := make([]byte, len(pk.encryptedData))
 	cfb.XORKeyStream(data, pk.encryptedData)
 
@@ -267,7 +427,8 @@
 	case PubKeyAlgoECDSA:
 		return pk.parseECDSAPrivateKey(data)
 	}
-	panic("impossible")
+
+	return errors.UnsupportedError(fmt.Sprintf("unsupported public key algo %d", pk.PublicKey.PubKeyAlgo))
 }
 
 func (pk *PrivateKey) parseRSAPrivateKey(data []byte) (err error) {
@@ -297,6 +458,7 @@
 		return err
 	}
 	rsaPriv.Precompute()
+
 	pk.PrivateKey = rsaPriv
 	pk.Encrypted = false
 	pk.encryptedData = nil
diff --git a/openpgp/packet/private_key_test.go b/openpgp/packet/private_key_test.go
index 81d3961..54aa960 100644
--- a/openpgp/packet/private_key_test.go
+++ b/openpgp/packet/private_key_test.go
@@ -62,6 +62,90 @@
 	}
 }
 
+func TestPrivateKeyEncrypt(t *testing.T) {
+	for i, test := range privateKeyTests {
+		packet, err := Read(readerFromHex(test.privateKeyHex))
+		if err != nil {
+			t.Errorf("#%d: failed to parse: %s", i, err)
+			continue
+		}
+
+		privKey := packet.(*PrivateKey)
+
+		if !privKey.Encrypted {
+			t.Errorf("#%d: private key isn't encrypted", i)
+			continue
+		}
+
+		err = privKey.Decrypt([]byte("testing"))
+		if err != nil {
+			t.Errorf("#%d: failed to decrypt: %s", i, err)
+			continue
+		}
+
+		passphrase := "password"
+		err = privKey.Encrypt([]byte(passphrase))
+		if err != nil {
+			t.Errorf("%s encrypt private key failed", err.Error())
+		}
+		err = privKey.Decrypt([]byte(passphrase))
+		if err != nil {
+			t.Errorf("%s decrypt private key failed", err.Error())
+		}
+	}
+}
+
+func TestSerializePGP(t *testing.T) {
+	for i, test := range privateKeyTests {
+		packet, err := Read(readerFromHex(test.privateKeyHex))
+		if err != nil {
+			t.Errorf("#%d: failed to parse: %s", i, err)
+			continue
+		}
+		privKey := packet.(*PrivateKey)
+		err = privKey.Decrypt([]byte("testing"))
+		if err != nil {
+			t.Errorf("#%d: failed to decrypt1: %s", i, err)
+			continue
+		}
+		err = privKey.Encrypt([]byte("testing2"))
+		if err != nil {
+			t.Errorf("#%d: failed to encrypt2: %s", i, err)
+			continue
+		}
+
+		buf := bytes.NewBuffer(nil)
+		err = privKey.Serialize(buf)
+
+		packet2, err := Read(buf)
+		privKey2 := packet2.(*PrivateKey)
+		if !privKey2.Encrypted {
+			t.Errorf("#%d: privKey2 should be encrypted", i)
+			continue
+		}
+		err = privKey2.Decrypt([]byte("testingx"))
+		if err == nil {
+			t.Errorf("#%d: failed to decryptx: %s", i, err)
+			continue
+		}
+		err = privKey2.Decrypt([]byte("testing2"))
+		if err != nil {
+			t.Errorf("#%d: failed to decrypt2: %s", i, err)
+			continue
+		}
+
+		buf = bytes.NewBuffer(nil)
+		err = privKey2.Serialize(buf)
+
+		packet3, err := Read(buf)
+		privKey3 := packet3.(*PrivateKey)
+		if privKey3.Encrypted {
+			t.Errorf("#%d: privKey3 should not be encrypted", i)
+			continue
+		}
+	}
+}
+
 func populateHash(hashFunc crypto.Hash, msg []byte) (hash.Hash, error) {
 	h := hashFunc.New()
 	if _, err := h.Write(msg); err != nil {
diff --git a/openpgp/s2k/s2k.go b/openpgp/s2k/s2k.go
index 4b9a44c..7918fbf 100644
--- a/openpgp/s2k/s2k.go
+++ b/openpgp/s2k/s2k.go
@@ -20,6 +20,10 @@
 // values. Currently, Config is used only by the Serialize function in
 // this package.
 type Config struct {
+	// S2KMode is the mode of s2k function.
+	// It can be 0 (simple), 1(salted), 3(iterated)
+	// 2(reserved) 100-110(private/experimental).
+	S2KMode uint8
 	// Hash is the default hash function to be used. If
 	// nil, SHA1 is used.
 	Hash crypto.Hash
@@ -43,6 +47,10 @@
 	}
 
 	return c.Hash
+}
+
+func (c *Config) EncodedCount() uint8 {
+	return c.encodedCount()
 }
 
 func (c *Config) encodedCount() uint8 {
@@ -151,9 +159,14 @@
 	}
 }
 
+func Parse(r io.Reader) (f func(out, in []byte), err error) {
+	f, _, _, err = ParseS2KWithConfig(r)
+	return
+}
+
 // Parse reads a binary specification for a string-to-key transformation from r
 // and returns a function which performs that transform.
-func Parse(r io.Reader) (f func(out, in []byte), err error) {
+func ParseS2KWithConfig(r io.Reader) (f func(out, in []byte), salt []byte, config Config, err error) {
 	var buf [9]byte
 
 	_, err = io.ReadFull(r, buf[:2])
@@ -163,41 +176,47 @@
 
 	hash, ok := HashIdToHash(buf[1])
 	if !ok {
-		return nil, errors.UnsupportedError("hash for S2K function: " + strconv.Itoa(int(buf[1])))
+		err = errors.UnsupportedError("hash for S2K function: " + strconv.Itoa(int(buf[1])))
+		return
 	}
 	if !hash.Available() {
-		return nil, errors.UnsupportedError("hash not available: " + strconv.Itoa(int(hash)))
+		err = errors.UnsupportedError("hash not available: " + strconv.Itoa(int(hash)))
+		return
 	}
+	config.Hash = hash
 	h := hash.New()
-
-	switch buf[0] {
+	config.S2KMode = buf[0]
+	switch config.S2KMode {
 	case 0:
-		f := func(out, in []byte) {
+		f = func(out, in []byte) {
 			Simple(out, h, in)
 		}
-		return f, nil
+		return
 	case 1:
 		_, err = io.ReadFull(r, buf[:8])
 		if err != nil {
 			return
 		}
-		f := func(out, in []byte) {
+		f = func(out, in []byte) {
 			Salted(out, h, in, buf[:8])
 		}
-		return f, nil
+		salt = buf[:8]
+		return
 	case 3:
 		_, err = io.ReadFull(r, buf[:9])
 		if err != nil {
 			return
 		}
-		count := decodeCount(buf[8])
-		f := func(out, in []byte) {
-			Iterated(out, h, in, buf[:8], count)
+		config.S2KCount = decodeCount(buf[8])
+		f = func(out, in []byte) {
+			Iterated(out, h, in, buf[:8], config.S2KCount)
 		}
-		return f, nil
+		salt = buf[:8]
+		return
 	}
 
-	return nil, errors.UnsupportedError("S2K function")
+	err = errors.UnsupportedError("S2K function")
+	return
 }
 
 // Serialize salts and stretches the given passphrase and writes the
